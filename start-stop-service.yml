---
- name: Restart Service on Windows Server
  hosts: windows
  gather_facts: yes
  vars:
    servername: "tka01.hix365.com"
    username: "sa_hixupdater"
    secure_password: "cc258062FDA99e76c!d950b2d8c13@@5"
    service_name: "*H365 Basic Comez*"
    env: "TEST"
    service_status: "Running"
    svc_action: "Restart"

  tasks:
    - name: Set up WinRM connection
      win_ping:

    - name: Gather service information
      win_shell: |
        Get-Service -Name "{{ service_name }}" | Select-Object Name, Status, StartType | ConvertTo-Json
      register: service_info_raw

    - name: Show raw service information
      debug:
        var: service_info_raw.stdout

    - name: Parse service information
      set_fact:
        services: "{{ service_info_raw.stdout | from_json }}"
      when: service_info_raw.stdout is not none and service_info_raw.stdout != ''

    - name: Show parsed service information
      debug:
        var: services

    - name: Check if the service is running on the local server
      set_fact:
        service_is_running: "{{ services | selectattr('Status', 'equalto', service_status) | list | length > 0 }}"
      when: ansible_hostname == servername and services is defined

    - name: Restart the specified service if it is running on the local server
      win_service:
        name: "{{ service_name }}"
        state: restarted
      when: 
        - ansible_hostname == servername
        - service_is_running

    - name: Restart the specified service on remote server
      win_shell: |
        $Credential = New-Object System.Management.Automation.PSCredential ("{{ username }}", (ConvertTo-SecureString "{{ secure_password }}" -AsPlainText -Force))
        $ServiceName = "{{ service_name }}"
        $Environment = "{{ env }}"
        $ServiceStatus = "{{ service_status }}"
        $Action = "{{ svc_action }}-Service"
        Do {
            $Service = Get-Service -Name $ServiceName | Where-Object {$_.Status -eq "$ServiceStatus" -AND $_.Name -like "*$Environment*" -AND $_.StartType -ne "Disabled"}
            $Service | & $Action -Verbose
            Start-Sleep -Seconds 2
        } Until ($Service -eq $Null)
      args:
        executable: powershell.exe
      when: 
        - ansible_hostname != servername
        - services is defined and services | selectattr('Status', 'equalto', service_status) | list | length > 0
